name: CI/CD using github actions & docker

# event trigger
# main이나 feature 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    # job에서 수행하는 step을 정의하는 곳
    steps:

      # Repository로 부터 CI 수행 서버로 코드를 내려받는 Action
      - uses: actions/checkout@v3

      # name은 step의 이름
      - name: Set up JDK 17
        uses: actions/setup-java@v3 #jdk를 다운 받고 캐싱하는 action
        with:
          #action에 전달하는 input을 정의하는 곳
          java-version: '17'
          distribution: 'zulu'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set Yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.data.redis.port: ${{ secrets.REDIS_PORT }}
          spring.datasource.url: ${{ secrets.MYSQL_URL }}
          spring.datasource.username: ${{ secrets.MYSQL_NAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PW }}

      - name: Set Junit Yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-junit.yml
        env:
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.data.redis.port: ${{ secrets.REDIS_PORT }}
          spring.datasource.url: ${{ secrets.MYSQL_TEST_URL }}
          spring.datasource.username: ${{ secrets.MYSQL_NAME }}
          spring.datasource.password: ${{ secrets.MYSQL_PW }}

      # gradle build
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        #build 시 -f 옵션으로 Dockerfile 별 설정 가능 Dockerfile-dev
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pfit .
          docker push ${{ secrets.DOCKER_USERNAME }}/pfit

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.SERVER_USERNAME }} # ubuntu
          password: ${{ secrets.SERVER_PASSWORD }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/pfit-prod
            sudo docker stop pfit-prod && docker rm pfit-prod && docker rmi ${{ secrets.DOCKER_USERNAME }}/pfit-prod:latest
            sudo docker run -d -p 8080:8080 --name pfit-prod --restart always ${{ secrets.DOCKER_USERNAME }}/pfit-prod:latest 
            sudo docker image prune -f