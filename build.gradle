plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.inturn'
version = '1.0'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//Redis를 통한 session 관리
	implementation 'org.springframework.session:spring-session-data-redis'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//Controller로 전달된 객체의 유효성 검증을 위한 validation 추가
	//LocalValidatorFactoryBean이 제약 조건을 검증 처리, spring-boot-starter-validation 의존성을 추가하면 해당 기능이 설정
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//lang3은 유틸리티 클래스를 제공하여 개발의 편의성 증대
	implementation 'org.apache.commons:commons-lang3'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	//JDBC와 연결하여 로깅할 수 있는 log4jdbc-log4j2 의존성 추가
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
	//QueryDsl 의존성 추가
	implementation("com.querydsl:querydsl-jpa:5.1.0:jakarta")
    testImplementation 'org.projectlombok:lombok:1.18.22'


    compileOnly 'org.projectlombok:lombok'

/*
	개발에 편리한 도구 제공
	1. 코드가 변경될 떄 자동으로 애플리케이션을 다시 시작한다.
		변경된 내용을 감시하여 자동으로 애플리케이션을 다시 시작시킨다.
		해당 클래스 로더만 다시 로드하고 스프링 애플리케이션 컨텍스트를 다시 시작시킨다.
	2. Live Reload브라우저로 전송되는 리소스(자바스크립트, CSS)가 변경될 때 브라우저를 새로고침 한다.
 */

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task unitTest(type: Test) {
	group = 'verification'
	description = 'Runs the unit tests.'
	useJUnitPlatform{
		excludeTags 'IntegrationTest'
	}
}

task integrationTest(type: Test) {
	group = 'verification'
	description = 'Runs the integration tests.'
	useJUnitPlatform{
		includeTags 'IntegrationTest'
	}
}

def querydslDir = "out/generated"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory.set(file(querydslDir))
}

clean.doLast {
	file(querydslDir).deleteDir()
}